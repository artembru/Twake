import{_ as e,c as t,o as i,a}from"./app.ad4e2cff.js";const m=JSON.parse('{"title":"What is a service in Twake ?","description":"You want to add new routes in an existing service, for instance add a feature to our channel service ? You are in the right place !","frontmatter":{"description":"You want to add new routes in an existing service, for instance add a feature to our channel service ? You are in the right place !"},"headers":[{"level":2,"title":"Discover what is in a service","slug":"discover-what-is-in-a-service","link":"#discover-what-is-in-a-service","children":[{"level":3,"title":"/web/controllers : where everything starts","slug":"web-controllers-where-everything-starts","link":"#web-controllers-where-everything-starts","children":[]},{"level":3,"title":"/services : where the magic happen","slug":"services-where-the-magic-happen","link":"#services-where-the-magic-happen","children":[]},{"level":3,"title":"/entities : where we keep the data","slug":"entities-where-we-keep-the-data","link":"#entities-where-we-keep-the-data","children":[]}]}],"relativePath":"internal-documentation/backend-services/intro/start-working-into-a-service.md"}'),n={name:"internal-documentation/backend-services/intro/start-working-into-a-service.md"},o=a('<h1 id="what-is-a-service-in-twake" tabindex="-1">What is a service in Twake ? <a class="header-anchor" href="#what-is-a-service-in-twake" aria-hidden="true">#</a></h1><p>The backend is developed using a <strong>software component approach</strong> in order to compose and adapt the platform based on needs and constraints. The current section describes this approach, and how to extend it by creating new components.</p><p>The platform has the following properties:</p><ul><li>A platform is composed of multiple components</li><li>A component has an unique name in the platform</li><li>A component can provide a <code>service</code></li><li>A component can consume <code>services</code> from other components</li><li>A component has a lifecycle composed of several states: <code>ready</code>, <code>initialized</code>, <code>started</code>, <code>stopped</code></li><li>A component lifecycle changes when a lifecycle event is triggered by the platform: <code>init</code>, <code>start</code>, <code>stop</code></li><li>By creating links between components (service producers and consumers), components lifecycles <strong>are also linked together</strong>: A component going from <code>ready</code> to <code>initialized</code> will wait for all its dependencies to be in <code>initialized</code> state. This is automatically handled by the platform.</li></ul><p>The platform currently have some limitations:</p><ul><li>Components can not have cyclic dependencies: if <code>component X</code> requires a component which requires <code>component X</code> directly or in one of its dependencies, the platform will not start</li><li>Components can only have local dependencies.</li></ul><h2 id="discover-what-is-in-a-service" tabindex="-1">Discover what is in a service <a class="header-anchor" href="#discover-what-is-in-a-service" aria-hidden="true">#</a></h2><p>To unfold the internal ways of services in Twake, we will follow a simple request journey into our framework.</p><ol><li>The requests starts from Twake Frontend or Postman for instance,</li><li>it then goes to a controller which validate the request parameters and extract them for the services,</li><li>the services uses the given parameters to get/set entities in database and returns a proper reply.</li></ol><h3 id="web-controllers-where-everything-starts" tabindex="-1">/web/controllers : where everything starts <a class="header-anchor" href="#web-controllers-where-everything-starts" aria-hidden="true">#</a></h3><p>This is where you declare the routing you want to use.</p><h3 id="services-where-the-magic-happen" tabindex="-1">/services : where the magic happen <a class="header-anchor" href="#services-where-the-magic-happen" aria-hidden="true">#</a></h3><p>This is where you work for real, calling databases, sending websockets events, using tasks pushers etc.</p><h3 id="entities-where-we-keep-the-data" tabindex="-1">/entities : where we keep the data <a class="header-anchor" href="#entities-where-we-keep-the-data" aria-hidden="true">#</a></h3><p>If you store data, you must define its data model and how it is stored in our database middleware.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>This document is not finished, you can contribute to it on our Github.</p></div>',16),r=[o];function s(c,d,l,h,p,w){return i(),t("div",null,r)}const v=e(n,[["render",s]]);export{m as __pageData,v as default};

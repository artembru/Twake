import{_ as e,c as a,o as s,a as n}from"./app.fda35797.js";const k=JSON.parse(`{"title":"\u{1F3D7} Install on your server","description":"","frontmatter":{},"headers":[{"level":2,"title":"Use Twake in SaaS","slug":"use-twake-in-saas","link":"#use-twake-in-saas","children":[]},{"level":2,"title":"Run Twake in your server","slug":"run-twake-in-your-server","link":"#run-twake-in-your-server","children":[{"level":3,"title":"What's next ?","slug":"what-s-next","link":"#what-s-next","children":[]}]},{"level":2,"title":"Ship Twake in production","slug":"ship-twake-in-production","link":"#ship-twake-in-production","children":[{"level":3,"title":"Update Twake","slug":"update-twake","link":"#update-twake","children":[]}]},{"level":2,"title":"Requirements and scalability","slug":"requirements-and-scalability","link":"#requirements-and-scalability","children":[]}],"relativePath":"onprem/installation.md"}`),o={name:"onprem/installation.md"},t=n(`<h1 id="\u{1F3D7}-install-on-your-server" tabindex="-1">\u{1F3D7} Install on your server <a class="header-anchor" href="#\u{1F3D7}-install-on-your-server" aria-hidden="true">#</a></h1><h2 id="use-twake-in-saas" tabindex="-1">Use Twake in SaaS <a class="header-anchor" href="#use-twake-in-saas" aria-hidden="true">#</a></h2><p>You can test or use Twake in our SaaS : <a href="https://chat.twake.app" target="_blank" rel="noreferrer">chat.twake.app</a></p><h2 id="run-twake-in-your-server" tabindex="-1">Run Twake in your server <a class="header-anchor" href="#run-twake-in-your-server" aria-hidden="true">#</a></h2><ol><li><p>First you&#39;ll need to <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer">install docker and docker-compose</a>.</p></li><li><p>Then you can install Twake on your server with this command</p></li></ol><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">git clone https://github.com/TwakeApp/Twake.git</span></span>
<span class="line"><span style="color:#A6ACCD;">cd Twake/twake</span></span>
<span class="line"><span style="color:#A6ACCD;">docker-compose -f docker-compose.onpremise.mongo.yml up -d</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Twake will be running on port 3000</p><h3 id="what-s-next" tabindex="-1">What&#39;s next ? <a class="header-anchor" href="#what-s-next" aria-hidden="true">#</a></h3><p>If you kept the default configuration, you can simply follow the signup steps, no email verification is required by default so you will get into Twake right after the signup steps.</p><h2 id="ship-twake-in-production" tabindex="-1">Ship Twake in production <a class="header-anchor" href="#ship-twake-in-production" aria-hidden="true">#</a></h2><p>See how to <a href="./configuration/">manage configuration</a>). And then how to <a href="./configuration/security.html">update security keys</a>, and finally how to use your <a href="./configuration/custom-domain-and-https/README.html">custom domain</a>).</p><h3 id="update-twake" tabindex="-1">Update Twake <a class="header-anchor" href="#update-twake" aria-hidden="true">#</a></h3><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">docker-compose stop</span></span>
<span class="line"><span style="color:#A6ACCD;">docker-compose rm #Remove images (not volumes so your data is safe)</span></span>
<span class="line"><span style="color:#A6ACCD;">docker-compose pull #Get new images</span></span>
<span class="line"><span style="color:#A6ACCD;">docker-compose up -d</span></span>
<span class="line"><span style="color:#A6ACCD;">docker-compose exec nginx yarn build #If you have custom frontend configuration</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="requirements-and-scalability" tabindex="-1">Requirements and scalability <a class="header-anchor" href="#requirements-and-scalability" aria-hidden="true">#</a></h2><p>Currently you&#39;ll need at least a <strong>2 cpu + 4 gb of ram</strong> machine for <strong>20-50 users</strong> depending on their usage and with ElasticSearch disabled.</p><p>If you enable ElasticSearch, use two machines, or limit the cpu/ram dedicated to it and use a larger machine (at least 2gb of ram and 1 cpu dedicated to ES for 20-50 users).</p><p>If you need to deploy Twake for more users, you can use only one big machine up to 500 users (Will need something like <strong>12 cpu and 32go of ram</strong>), then you&#39;ll need to use multiple nodes.</p><hr><h1 id="\u{1F3A1}-scale-with-twake" tabindex="-1">\u{1F3A1} Scale with Twake <a class="header-anchor" href="#\u{1F3A1}-scale-with-twake" aria-hidden="true">#</a></h1><blockquote><p>We deployed Twake on production for companies of 10 to 50 users in a single node. We also deployed Twake in a scalable mode and we support currently thousands of concurrent users. If you deploy Twake in your own company we would love to have your feedback here <a href="https://github.com/TwakeApp/Twake/issues/289" target="_blank" rel="noreferrer">https://github.com/TwakeApp/Twake/issues/289</a> to improve our requirements documentation. Now if you want to scale with Twake and support thousand of users, continue reading.</p></blockquote><p>Scaling with Twake is possible if you install Twake with <strong>RabbitMQ, Redis, ElasticSearch and ScyllaDB</strong>.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">git clone https://github.com/TwakeApp/Twake.git</span></span>
<span class="line"><span style="color:#A6ACCD;">cd Twake/twake</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">cp -n docker-compose.yml.dist.onpremise docker-compose.yml</span></span>
<span class="line"><span style="color:#A6ACCD;">cp -nR default-configuration/ configuration/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">docker-compose pull</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">docker-compose up -d scylladb</span></span>
<span class="line"><span style="color:#A6ACCD;">sleep 5m #Wait scylladb to startup</span></span>
<span class="line"><span style="color:#A6ACCD;">docker-compose up -d php rabbitmq</span></span>
<span class="line"><span style="color:#A6ACCD;">sleep 10m #Wait php to create tables in scylladb</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">docker-compose up -d</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><blockquote><p>To run ElasticSearch (optional, but enabled by default in the Twake docker-compose) you must increase the max_map_count of your system: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_set_vm_max_map_count_to_at_least_262144" target="_blank" rel="noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#_set_vm_max_map_count_to_at_least_262144</a></p><p>To fix an other bug with ElasticSearch container, you must also run this command: <code>chmod 777 ./docker-data/es_twake</code> (create the folder if it doesn&#39;t exists in your docker-compose.yml folder)</p></blockquote><p>Twake will be running on port 8000 \u{1F389}</p>`,24),l=[t];function r(i,p,c,d,u,h){return s(),a("div",null,l)}const y=e(o,[["render",r]]);export{k as __pageData,y as default};
